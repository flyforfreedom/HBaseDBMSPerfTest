/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.teradata.hbasedbmsperftest;

import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.LinkedList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.hadoop.hbase.client.PerClientRandomNonceGenerator;

/**
 *
 * @author glennm
 */
public class Main extends javax.swing.JFrame {

    
    private TestParameters testParameters = new TestParameters();
    public static final String STATUS_IDLE = "Idle";
    public static final String STATUS_INIT = "Initialising";
    public static final String STATUS_RUNNING = "Running";
    public static final String STATUS_COMPLETE = "Completed";
    public static final String STATUS_CANCELLED = "Cancelled";
    public static final String STATUS_FAIL = "Failed";
    public static final String STATUS_EXCEPTION = "Exception";
    
    
    private static final String TEST_PUT = "Test: Put";
    private static final String TEST_GET = "Test: Get";
    private static final String TEST_SCAN = "Test: Scan";
    
    private static final Color COLOR_PUT  = new Color(255, 192, 192);
    private static final Color COLOR_GET  = new Color(192, 255, 192);
    private static final Color COLOR_SCAN = new Color(192, 255, 255);
    
    private File dbmsPropertiesFile = new File("dbms.properties");
    private File hbasePropertiesFile = new File("hbase.properties");
    
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        updateTestTargetLabel();
        statusLabel.setText(STATUS_IDLE);
        logUpdaterThread.start();
        
        testGetMenuItem.setSelected(true);
        testGetMenuItemActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        testPlatformButtonGroup = new javax.swing.ButtonGroup();
        testCaseButtonGroup = new javax.swing.ButtonGroup();
        jToolBar1 = new javax.swing.JToolBar();
        jPanel1 = new javax.swing.JPanel();
        testTargetLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        testCaseLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageLogTextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        filePromptToSaveMenuItemCheckBox = new javax.swing.JCheckBoxMenuItem();
        fileSaveMetricsAsMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        fileExitMenuItem = new javax.swing.JMenuItem();
        testMenu = new javax.swing.JMenu();
        testRdbmsMenuItem = new javax.swing.JRadioButtonMenuItem();
        testHBaseMenuItem = new javax.swing.JRadioButtonMenuItem();
        testNoOpPlatformMenuItem = new javax.swing.JRadioButtonMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        testConfigurationMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        testPutMenutItem = new javax.swing.JRadioButtonMenuItem();
        testGetMenuItem = new javax.swing.JRadioButtonMenuItem();
        testScanMenuItem = new javax.swing.JRadioButtonMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        runTestMenuItem = new javax.swing.JMenuItem();
        cancelRunningTestMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("HBase Performance Tester");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        testTargetLabel.setBackground(new java.awt.Color(204, 255, 255));
        testTargetLabel.setText("Target");
        testTargetLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        testTargetLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        testTargetLabel.setMaximumSize(new java.awt.Dimension(100, 22));
        testTargetLabel.setMinimumSize(new java.awt.Dimension(100, 22));
        testTargetLabel.setOpaque(true);
        testTargetLabel.setPreferredSize(new java.awt.Dimension(100, 22));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(testTargetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(testTargetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jToolBar1.add(jPanel1);

        statusLabel.setBackground(new java.awt.Color(204, 255, 204));
        statusLabel.setText("Status");
        statusLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        statusLabel.setMaximumSize(new java.awt.Dimension(100, 22));
        statusLabel.setMinimumSize(new java.awt.Dimension(100, 22));
        statusLabel.setOpaque(true);
        statusLabel.setPreferredSize(new java.awt.Dimension(100, 22));

        testCaseLabel.setBackground(new java.awt.Color(204, 255, 204));
        testCaseLabel.setText("Get Test");
        testCaseLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        testCaseLabel.setOpaque(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(testCaseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 9, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(testCaseLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jToolBar1.add(jPanel2);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 143, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );

        jToolBar1.add(jPanel4);

        messageLogTextArea.setEditable(false);
        messageLogTextArea.setColumns(20);
        messageLogTextArea.setRows(5);
        jScrollPane1.setViewportView(messageLogTextArea);

        fileMenu.setText("File");

        filePromptToSaveMenuItemCheckBox.setSelected(true);
        filePromptToSaveMenuItemCheckBox.setText("Prompt to save detailed Metrics after test");
        fileMenu.add(filePromptToSaveMenuItemCheckBox);

        fileSaveMetricsAsMenuItem.setText("Save Detailed Metrics As ...");
        fileSaveMetricsAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveMetricsAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileSaveMetricsAsMenuItem);
        fileMenu.add(jSeparator4);

        fileExitMenuItem.setText("Exit");
        fileExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileExitMenuItem);

        jMenuBar1.add(fileMenu);

        testMenu.setText("Test");

        testPlatformButtonGroup.add(testRdbmsMenuItem);
        testRdbmsMenuItem.setSelected(true);
        testRdbmsMenuItem.setText("RDBMS Test");
        testRdbmsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testRdbmsMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(testRdbmsMenuItem);

        testPlatformButtonGroup.add(testHBaseMenuItem);
        testHBaseMenuItem.setText("HBase Test");
        testHBaseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testHBaseMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(testHBaseMenuItem);

        testPlatformButtonGroup.add(testNoOpPlatformMenuItem);
        testNoOpPlatformMenuItem.setText("NoOp Test");
        testNoOpPlatformMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testNoOpPlatformMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(testNoOpPlatformMenuItem);
        testMenu.add(jSeparator1);

        testConfigurationMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        testConfigurationMenuItem.setText("Test Parameters");
        testConfigurationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testConfigurationMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(testConfigurationMenuItem);
        testMenu.add(jSeparator3);

        testCaseButtonGroup.add(testPutMenutItem);
        testPutMenutItem.setSelected(true);
        testPutMenutItem.setText("Put test");
        testPutMenutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testPutMenutItemActionPerformed(evt);
            }
        });
        testMenu.add(testPutMenutItem);

        testCaseButtonGroup.add(testGetMenuItem);
        testGetMenuItem.setText("Get Test");
        testGetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testGetMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(testGetMenuItem);

        testCaseButtonGroup.add(testScanMenuItem);
        testScanMenuItem.setText("Scan Test");
        testScanMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testScanMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(testScanMenuItem);
        testMenu.add(jSeparator2);

        runTestMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        runTestMenuItem.setText("Run Test");
        runTestMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runTestMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(runTestMenuItem);

        cancelRunningTestMenuItem.setText("Cancel Run");
        cancelRunningTestMenuItem.setEnabled(false);
        cancelRunningTestMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelRunningTestMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(cancelRunningTestMenuItem);

        jMenuBar1.add(testMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1536, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.out.println("Window is closing...");
        shutdown();
    }//GEN-LAST:event_formWindowClosing

    private void fileExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExitMenuItemActionPerformed
        System.out.println("File exit selected. Set visible = false");
        setVisible(false);
        System.out.println("File exit: dispose()");
        dispose();
        shutdown();
    }//GEN-LAST:event_fileExitMenuItemActionPerformed

    private void testHBaseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testHBaseMenuItemActionPerformed
        updateTestTargetLabel();
    }//GEN-LAST:event_testHBaseMenuItemActionPerformed

    private void testConfigurationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testConfigurationMenuItemActionPerformed
        TestSettingsDialog dlg = new TestSettingsDialog(this, true);
        dlg.setTestParameters(testParameters);
        dlg.setDbmsPropertiesFile(dbmsPropertiesFile.getAbsolutePath());
        dlg.setHBasePropertiesFile(hbasePropertiesFile.getAbsolutePath());
        dlg.setVisible(true);
        
        if (dlg.isCommitted()) {
            System.out.println("Test parameters have been updated.");
            testParameters = dlg.getTestParameters();
            dbmsPropertiesFile = new File(dlg.getDbmsPropertiesFile());
            hbasePropertiesFile = new File(dlg.getHBasePropertiesFile());
        }
    }//GEN-LAST:event_testConfigurationMenuItemActionPerformed

    private void testRdbmsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testRdbmsMenuItemActionPerformed
        updateTestTargetLabel();
    }//GEN-LAST:event_testRdbmsMenuItemActionPerformed

    
    private TestController controller = null;
    
    private TestCase selectedTestCase = TestCase.GET;
    
    private void runTestMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runTestMenuItemActionPerformed
        controller = new TestController();
        controller.setMainFrame(this);
        
        try {
            TestDriver driver = new TestDriverNoOp();

            if (testRdbmsMenuItem.isSelected()) {
                testParameters.setPropertiesFile(dbmsPropertiesFile);
                driver = new TestRDBMSDriver();
            }
            if (testHBaseMenuItem.isSelected()) {
                testParameters.setPropertiesFile(hbasePropertiesFile);
                driver = new TestHBaseDriver();
            }

            controller.setTestParameters(testParameters);
            controller.setTestCase(selectedTestCase);

            controller.setDriver(driver);

            controller.start();

            cancelRunningTestMenuItem.setEnabled(true);
            runTestMenuItem.setEnabled(false);
        } catch (Throwable t) {
            addLogMessage("Exception: " + t.toString());
            addLogMessage("Exception booting test case");
        }
        
    }//GEN-LAST:event_runTestMenuItemActionPerformed

    private void cancelRunningTestMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelRunningTestMenuItemActionPerformed
        if (controller != null) {
            controller.setAbort(true);
        }
    }//GEN-LAST:event_cancelRunningTestMenuItemActionPerformed

    private void testNoOpPlatformMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testNoOpPlatformMenuItemActionPerformed
        testTargetLabel.setText("NoOp");
    }//GEN-LAST:event_testNoOpPlatformMenuItemActionPerformed

    private void testGetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testGetMenuItemActionPerformed
        testCaseLabel.setText(TEST_GET);
        testCaseLabel.setBackground(COLOR_GET);
        selectedTestCase = TestCase.GET;
    }//GEN-LAST:event_testGetMenuItemActionPerformed

    private void testPutMenutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testPutMenutItemActionPerformed
        testCaseLabel.setText(TEST_PUT);
        testCaseLabel.setBackground(COLOR_PUT);
        selectedTestCase = TestCase.PUT;
    }//GEN-LAST:event_testPutMenutItemActionPerformed

    private void testScanMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testScanMenuItemActionPerformed
        testCaseLabel.setText(TEST_SCAN);
        testCaseLabel.setBackground(COLOR_SCAN);
        selectedTestCase = TestCase.SCAN;
    }//GEN-LAST:event_testScanMenuItemActionPerformed

    private void fileSaveMetricsAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveMetricsAsMenuItemActionPerformed
        saveFile();
    }//GEN-LAST:event_fileSaveMetricsAsMenuItemActionPerformed

    
    private File lastMetricsFile = null;
    
    public void notifyTestCompleted() {
        
        controller = null;
        cancelRunningTestMenuItem.setEnabled(false);
        runTestMenuItem.setEnabled(true);
        
        dumpMetrics();
        if (filePromptToSaveMenuItemCheckBox.isSelected()) {
            int reply = JOptionPane.showConfirmDialog(this, "Do you wish to save the detailed metrics?", "Save metrics", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (reply == JOptionPane.YES_OPTION) {
                saveFile();
            }
        }
        
    }


    public void saveFile() {
        JFileChooser saveAsFileChooser = new JFileChooser();
        if (lastMetricsFile != null) {
            saveAsFileChooser.setSelectedFile(lastMetricsFile);
        }
        if ( saveAsFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            lastMetricsFile = saveAsFileChooser.getSelectedFile();

            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");

            PrintWriter pw = null;
            try {
                pw = new PrintWriter(lastMetricsFile);
                pw.println("ts,split time,split count,cumul time,cumul count");
                for (PerformanceMetric metric: metricList) {
                    Calendar cal = Calendar.getInstance();
                    cal.setTimeInMillis(metric.getTimestamp());
                    pw.println(
                        String.format("%s,%d,%d,%d,%d",
                                df.format(cal.getTime()),
                                metric.getSplitTime(),
                                metric.getSplitRecordCount(),
                                metric.getElapsedTime(),
                                metric.getCumulRecordCount()));
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Could not save file - FileNotFoundException " + lastMetricsFile.getAbsolutePath() + "\n" + e.getMessage(), "File Save Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                if (pw != null) {
                    pw.close();
                }
            }
        }

    }
    
    public void updateStatusLabel(String text) {
        statusLabel.setText(text);
    }
    
    private void updateTestTargetLabel() {
        String target = "unknown";
        if (testHBaseMenuItem.isSelected()) {
            target = "HBase";
        }
        if (testRdbmsMenuItem.isSelected()) {
            target = "RDBMS";
        }
        testTargetLabel.setText(target);
    }
    
    
    private LinkedList<PerformanceMetric> metricList = new LinkedList<>();
    
    public void clearMetrics() {
        metricList = new LinkedList<>();
    }
    
    
    public void addMetric(PerformanceMetric metric) {
        metricList.add(metric);
    }
    
    
    private void dumpMetrics() {
        for (PerformanceMetric metric: metricList) {
            System.out.println("metric: " + metric);
        }
    }
    
    
    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss.SSS");
    private LinkedList<String> msgList = new LinkedList<> ();
    private int logLimit = 10000;
    
    public void clearLogMessages() {
        msgList = new LinkedList<>();
        messageLogTextArea.setText("");
    }

    
    public void addLogMessage(String msg) {
        long now = System.currentTimeMillis();
        
        Calendar cal = Calendar.getInstance();
        cal.setTimeInMillis(now);
        StringBuilder sb = new StringBuilder(df.format(cal.getTime()));
        sb.append(": ");
        sb.append(msg);
//        System.out.println("Added: " + msg);
        synchronized (logUpdaterThread) {
            msgList.addFirst(sb.toString());
            logUpdaterThread.notify();
//            System.out.println("Notified log updater.");
        }
    }
    
    private final LogUpdater logUpdaterThread = new LogUpdater();
    
    private class LogUpdater extends Thread {

        private boolean running = true;

        /**
         * Set the value of running
         *
         * @param running new value of running
         */
        public void setRunning(boolean running) {
            this.running = running;
        }

        
        @Override
        public void run() {
            
            while (running) {
                
                synchronized (logUpdaterThread) {
                    try {
                        StringBuilder sb = new StringBuilder();
//                        System.out.println("LogUpdaterThread: waiting.");
                        logUpdaterThread.wait();
//                        System.out.println("LogUpdaterThread: worken up " + msgList.size() + " messages in list");
                        if (! running) {
                            return;
                        }
                        while (msgList.size() > logLimit) {
                            msgList.removeLast();
                        }

                        sb = new StringBuilder();
                        for (String str : msgList) {
                            sb.append(str);
                            sb.append("\n");
                        }
                        messageLogTextArea.setText(sb.toString());
                    } catch (InterruptedException e) {
                        
                    }
                }

            }
        }
        
    }
    
    
    public void shutdown() {
        System.out.println("Shutdown method called.");
        logUpdaterThread.setRunning(false);
        synchronized (logUpdaterThread) {
            logUpdaterThread.notify();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem cancelRunningTestMenuItem;
    private javax.swing.JMenuItem fileExitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JCheckBoxMenuItem filePromptToSaveMenuItemCheckBox;
    private javax.swing.JMenuItem fileSaveMetricsAsMenuItem;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextArea messageLogTextArea;
    private javax.swing.JMenuItem runTestMenuItem;
    private javax.swing.JLabel statusLabel;
    private javax.swing.ButtonGroup testCaseButtonGroup;
    private javax.swing.JLabel testCaseLabel;
    private javax.swing.JMenuItem testConfigurationMenuItem;
    private javax.swing.JRadioButtonMenuItem testGetMenuItem;
    private javax.swing.JRadioButtonMenuItem testHBaseMenuItem;
    private javax.swing.JMenu testMenu;
    private javax.swing.JRadioButtonMenuItem testNoOpPlatformMenuItem;
    private javax.swing.ButtonGroup testPlatformButtonGroup;
    private javax.swing.JRadioButtonMenuItem testPutMenutItem;
    private javax.swing.JRadioButtonMenuItem testRdbmsMenuItem;
    private javax.swing.JRadioButtonMenuItem testScanMenuItem;
    private javax.swing.JLabel testTargetLabel;
    // End of variables declaration//GEN-END:variables
}
